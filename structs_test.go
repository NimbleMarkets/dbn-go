// Copyright (c) 2024 Neomantra Corp

package dbn_test

import (
	"os"
	"strings"
	"unsafe"

	dbn "github.com/NimbleMarkets/dbn-go"
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
)

var _ = Describe("Struct", func() {
	Context("correctness", func() {
		It("struct consts should be correct", func() {
			Expect(unsafe.Sizeof(dbn.RHeader{})).To(Equal(uintptr(dbn.RHeader_Size)))
			Expect(unsafe.Sizeof(dbn.BidAskPair{})).To(Equal(uintptr(dbn.BidAskPair_Size)))
			Expect(unsafe.Sizeof(dbn.Mbp0Msg{})).To(Equal(uintptr(dbn.Mbp0Msg_Size)))
			Expect(unsafe.Sizeof(dbn.Mbp1Msg{})).To(Equal(uintptr(dbn.Mbp1Msg_Size)))
			Expect(unsafe.Sizeof(dbn.Mbp10Msg{})).To(Equal(uintptr(dbn.Mbp10Msg_Size)))
			Expect(unsafe.Sizeof(dbn.CbboMsg{})).To(Equal(uintptr(dbn.CbboMsg_Size)))
			Expect(unsafe.Sizeof(dbn.OhlcvMsg{})).To(Equal(uintptr(dbn.OhlcvMsg_Size)))
			Expect(unsafe.Sizeof(dbn.ImbalanceMsg{})).To(Equal(uintptr(dbn.ImbalanceMsg_Size)))
			Expect(unsafe.Sizeof(dbn.ErrorMsg{})).To(Equal(uintptr(dbn.ErrorMsg_Size)))
			Expect(unsafe.Sizeof(dbn.SystemMsg{})).To(Equal(uintptr(dbn.SystemMsg_Size)))
			Expect(unsafe.Sizeof(dbn.StatMsg{})).To(Equal(uintptr(dbn.StatMsg_Size)))
			Expect(unsafe.Sizeof(dbn.StatusMsg{})).To(Equal(uintptr(dbn.StatusMsg_Size)))
			Expect(unsafe.Sizeof(dbn.InstrumentDefMsg{})).To(Equal(uintptr(dbn.InstrumentDefMsg_Size)))
			Expect(int((&dbn.RHeader{}).RSize())).To(Equal(dbn.RHeader_Size))
			Expect(int((&dbn.Mbp0Msg{}).RSize())).To(Equal(dbn.Mbp0Msg_Size))
			Expect(int((&dbn.Mbp1Msg{}).RSize())).To(Equal(dbn.Mbp1Msg_Size))
			Expect(int((&dbn.Mbp10Msg{}).RSize())).To(Equal(dbn.Mbp10Msg_Size))
			Expect(int((&dbn.CbboMsg{}).RSize())).To(Equal(dbn.CbboMsg_Size))
			Expect(int((&dbn.OhlcvMsg{}).RSize())).To(Equal(dbn.OhlcvMsg_Size))
			Expect(int((&dbn.ImbalanceMsg{}).RSize())).To(Equal(dbn.ImbalanceMsg_Size))
			Expect(int((&dbn.ErrorMsg{}).RSize())).To(Equal(dbn.ErrorMsg_Size))
			Expect(int((&dbn.StatMsg{}).RSize())).To(Equal(dbn.StatMsg_Size))
			Expect(int((&dbn.StatusMsg{}).RSize())).To(Equal(dbn.StatusMsg_Size))
			Expect(int((&dbn.InstrumentDefMsg{}).RSize())).To(Equal(dbn.InstrumentDefMsg_Size))
		})
	})

	Context("v1 file testing", func() {
		It("should read v1 olhc-1s correctly", func() {
			file, err := os.Open("./tests/data/test_data.ohlcv-1s.v1.dbn")
			Expect(err).To(BeNil())
			defer file.Close()

			// dbn -J ./tests/data/test_data.ohlcv-1s.v1.dbn
			// {"hd":{"ts_event":"1609160400000000000","rtype":32,"publisher_id":1,"instrument_id":5482},"open":"372025000000000","high":"372050000000000","low":"372025000000000","close":"372050000000000","volume":"57"}
			// {"hd":{"ts_event":"1609160401000000000","rtype":32,"publisher_id":1,"instrument_id":5482},"open":"372050000000000","high":"372050000000000","low":"372050000000000","close":"372050000000000","volume":"13"}

			records, metadata, err := dbn.ReadDBNToSlice[dbn.OhlcvMsg](file)
			Expect(err).To(BeNil())
			Expect(metadata).ToNot(BeNil())
			Expect(len(records)).To(Equal(2))

			r0, r0h := records[0], records[0].Header
			Expect(r0h.TsEvent).To(Equal(uint64(1609160400000000000)))
			Expect(r0h.RType).To(Equal(dbn.RType(32)))
			Expect(r0h.PublisherID).To(Equal(uint16(1)))
			Expect(r0h.InstrumentID).To(Equal(uint32(5482)))
			Expect(r0.Open).To(Equal(int64(372025000000000)))
			Expect(r0.High).To(Equal(int64(372050000000000)))
			Expect(r0.Low).To(Equal(int64(372025000000000)))
			Expect(r0.Close).To(Equal(int64(372050000000000)))
			Expect(r0.Volume).To(Equal(uint64(57)))

			r1, r1h := records[1], records[1].Header
			Expect(r1h.TsEvent).To(Equal(uint64(1609160401000000000)))
			Expect(r1h.RType).To(Equal(dbn.RType(32)))
			Expect(r1h.PublisherID).To(Equal(uint16(1)))
			Expect(r1h.InstrumentID).To(Equal(uint32(5482)))
			Expect(r1.Open).To(Equal(int64(372050000000000)))
			Expect(r1.High).To(Equal(int64(372050000000000)))
			Expect(r1.Low).To(Equal(int64(372050000000000)))
			Expect(r1.Close).To(Equal(int64(372050000000000)))
			Expect(r1.Volume).To(Equal(uint64(13)))
		})
		// TODO: we do not currently support v1
		// It("should read v1 definition correctly", func() {
		// 	file, err := os.Open("./tests/data/test_data.definition.v1.dbn.zst")
		// 	Expect(err).To(BeNil())
		// 	defer file.Close()
		//
		// 	records, metadata, err := dbn.ReadDBNToSlice[dbn.InstrumentDefMsg](file)
		// 	Expect(err).To(BeNil())
		// 	Expect(metadata).ToNot(BeNil())
		// 	Expect(len(records)).To(Equal(2))
		// })
	})

	Context("v2 files", func() {
		It("should read a v2 ohlc-1s correctly", func() {
			file, err := os.Open("./tests/data/test_data.ohlcv-1s.dbn")
			Expect(err).To(BeNil())
			defer file.Close()

			records, metadata, err := dbn.ReadDBNToSlice[dbn.OhlcvMsg](file)
			Expect(err).To(BeNil())
			Expect(metadata).ToNot(BeNil())
			Expect(len(records)).To(Equal(2))

			// dbn -J ./tests/data/test_data.ohlcv-1s.dbn
			// {"hd":{"ts_event":"1609160400000000000","rtype":32,"publisher_id":1,"instrument_id":5482},"open":"372025000000000","high":"372050000000000","low":"372025000000000","close":"372050000000000","volume":"57"}
			// {"hd":{"ts_event":"1609160401000000000","rtype":32,"publisher_id":1,"instrument_id":5482},"open":"372050000000000","high":"372050000000000","low":"372050000000000","close":"372050000000000","volume":"13"}

			r0, r0h := records[0], records[0].Header
			Expect(r0h.TsEvent).To(Equal(uint64(1609160400000000000)))
			Expect(r0h.RType).To(Equal(dbn.RType(32)))
			Expect(r0h.PublisherID).To(Equal(uint16(1)))
			Expect(r0h.InstrumentID).To(Equal(uint32(5482)))
			Expect(r0.Open).To(Equal(int64(372025000000000)))
			Expect(r0.High).To(Equal(int64(372050000000000)))
			Expect(r0.Low).To(Equal(int64(372025000000000)))
			Expect(r0.Close).To(Equal(int64(372050000000000)))
			Expect(r0.Volume).To(Equal(uint64(57)))

			r1, r1h := records[1], records[1].Header
			Expect(r1h.TsEvent).To(Equal(uint64(1609160401000000000)))
			Expect(r1h.RType).To(Equal(dbn.RType(32)))
			Expect(r1h.PublisherID).To(Equal(uint16(1)))
			Expect(r1h.InstrumentID).To(Equal(uint32(5482)))
			Expect(r1.Open).To(Equal(int64(372050000000000)))
			Expect(r1.High).To(Equal(int64(372050000000000)))
			Expect(r1.Low).To(Equal(int64(372050000000000)))
			Expect(r1.Close).To(Equal(int64(372050000000000)))
			Expect(r1.Volume).To(Equal(uint64(13)))
		})
		It("should read a v2 trades/mbp0 correctly", func() {
			file, err := os.Open("./tests/data/test_data.trades.dbn")
			Expect(err).To(BeNil())
			defer file.Close()

			records, metadata, err := dbn.ReadDBNToSlice[dbn.Mbp0Msg](file)
			Expect(err).To(BeNil())
			Expect(metadata).ToNot(BeNil())
			Expect(len(records)).To(Equal(2))

			// dbn -J ./tests/data/test_data.trades.dbn
			// {"ts_recv":"1609160400099150057","hd":{"ts_event":"1609160400098821953","rtype":0,"publisher_id":1,"instrument_id":5482},"action":"T","side":"A","depth":0,"price":"3720250000000","size":5,"flags":129,"ts_in_delta":19251,"sequence":1170380}
			// {"ts_recv":"1609160400108142648","hd":{"ts_event":"1609160400107665963","rtype":0,"publisher_id":1,"instrument_id":5482},"action":"T","side":"A","depth":0,"price":"3720250000000","size":21,"flags":129,"ts_in_delta":20728,"sequence":1170414}

			r0, r0h := records[0], records[0].Header
			Expect(r0h.TsEvent).To(Equal(uint64(1609160400098821953)))
			Expect(r0h.RType).To(Equal(dbn.RType(0)))
			Expect(r0h.PublisherID).To(Equal(uint16(1)))
			Expect(r0h.InstrumentID).To(Equal(uint32(5482)))
			// Expect(r0.TsRecv).To(Equal(1609160400099150057))
			Expect(string(r0.Action)).To(Equal("T"))
			Expect(string(r0.Side)).To(Equal("A"))
			Expect(r0.Depth).To(Equal(uint8(0)))
			Expect(r0.Price).To(Equal(int64(3720250000000)))
			Expect(r0.Size).To(Equal(uint32(5)))
			Expect(r0.Flags).To(Equal(uint8(129)))
			Expect(r0.TsInDelta).To(Equal(int32(19251)))
			Expect(r0.Sequence).To(Equal(uint32(1170380)))

			r1, r1h := records[1], records[1].Header
			Expect(r1h.TsEvent).To(Equal(uint64(1609160400107665963)))
			Expect(r1h.RType).To(Equal(dbn.RType(0)))
			Expect(r1h.PublisherID).To(Equal(uint16(1)))
			Expect(r1h.InstrumentID).To(Equal(uint32(5482)))
			Expect(r1.TsRecv).To(Equal(uint64(1609160400108142648)))
			Expect(string(r1.Action)).To(Equal("T"))
			Expect(string(r1.Side)).To(Equal("A"))
			Expect(r1.Depth).To(Equal(uint8(0)))
			Expect(r1.Price).To(Equal(int64(3720250000000)))
			Expect(r1.Size).To(Equal(uint32(21)))
			Expect(r1.Flags).To(Equal(uint8(129)))
			Expect(r1.TsInDelta).To(Equal(int32(20728)))
			Expect(r1.Sequence).To(Equal(uint32(1170414)))
		})
		It("should read v2 definition correctly", func() {
			file, err := os.Open("./tests/data/test_data.definition.dbn")
			Expect(err).To(BeNil())
			defer file.Close()

			records, metadata, err := dbn.ReadDBNToSlice[dbn.InstrumentDefMsg](file)
			Expect(err).To(BeNil())
			Expect(metadata).ToNot(BeNil())
			Expect(len(records)).To(Equal(2))

			// dbn -J ./tests/data/test_data.definition.dbn
			r0, r0h := records[0], records[0].Header
			Expect(r0h.TsEvent).To(Equal(uint64(1633331241618018154)))
			Expect(r0h.RType).To(Equal(dbn.RType(19)))
			Expect(r0h.PublisherID).To(Equal(uint16(2)))
			Expect(r0h.InstrumentID).To(Equal(uint32(6819)))
			Expect(r0.TsRecv).To(Equal(uint64(1633331241618029519)))
			Expect(r0.MinPriceIncrement).To(Equal(int64(9223372036854775807)))
			Expect(r0.DisplayFactor).To(Equal(int64(100000000000000)))
			Expect(r0.Expiration).To(Equal(uint64(18446744073709551615)))
			Expect(r0.Activation).To(Equal(uint64(18446744073709551615)))
			Expect(r0.HighLimitPrice).To(Equal(int64(9223372036854775807)))
			Expect(r0.LowLimitPrice).To(Equal(int64(9223372036854775807)))
			Expect(r0.MaxPriceVariation).To(Equal(int64(9223372036854775807)))
			Expect(r0.TradingReferencePrice).To(Equal(int64(9223372036854775807)))
			Expect(r0.UnitOfMeasureQty).To(Equal(int64(9223372036854775807)))
			Expect(r0.MinPriceIncrementAmount).To(Equal(int64(9223372036854775807)))
			Expect(r0.PriceRatio).To(Equal(int64(9223372036854775807)))
			Expect(r0.StrikePrice).To(Equal(int64(9223372036854775807)))
			Expect(r0.InstAttribValue).To(Equal(int32(2147483647)))
			Expect(r0.UnderlyingID).To(Equal(uint32(0)))
			Expect(r0.RawInstrumentID).To(Equal(uint32(2147483647)))
			Expect(r0.MarketDepthImplied).To(Equal(int32(2147483647)))
			Expect(r0.MarketDepth).To(Equal(int32(2147483647)))
			Expect(r0.MarketSegmentID).To(Equal(uint32(4294967295)))
			Expect(r0.MaxTradeVol).To(Equal(uint32(4294967295)))
			Expect(r0.MinLotSize).To(Equal(int32(2147483647)))
			Expect(r0.MinLotSizeBlock).To(Equal(int32(2147483647)))
			Expect(r0.MinLotSizeRoundLot).To(Equal(int32(100)))
			Expect(r0.MinTradeVol).To(Equal(uint32(4294967295)))
			Expect(r0.ContractMultiplier).To(Equal(int32(2147483647)))
			Expect(r0.DecayQuantity).To(Equal(int32(2147483647)))
			Expect(r0.OriginalContractSize).To(Equal(int32(2147483647)))
			Expect(r0.TradingReferenceDate).To(Equal(uint16(65535)))
			Expect(r0.ApplID).To(Equal(int16(32767)))
			Expect(r0.MaturityYear).To(Equal(uint16(65535)))
			Expect(r0.DecayStartDate).To(Equal(uint16(65535)))
			Expect(r0.ChannelID).To(Equal(uint16(0)))
			Expect(string(r0.Currency[:])).To(Equal(strings.Repeat("\x00", 4)))
			Expect(string(r0.SettlCurrency[:])).To(Equal(strings.Repeat("\x00", 4)))
			Expect(string(r0.Secsubtype[:])).To(Equal("Z " + strings.Repeat("\x00", 4)))
			Expect(string(r0.RawSymbol[:])).To(Equal("MSFT" + strings.Repeat("\x00", dbn.MetadataV2_SymbolCstrLen-len("MSFT"))))
			Expect(string(r0.Group[:])).To(Equal("pxnas-1" + strings.Repeat("\x00", 21-len("pxnas-1"))))
			Expect(string(r0.Exchange[:])).To(Equal("XNAS" + strings.Repeat("\x00", 5-len("XNAS"))))
			Expect(string(r0.Asset[:])).To(Equal(strings.Repeat("\x00", 7)))
			Expect(string(r0.Cfi[:])).To(Equal(strings.Repeat("\x00", 7)))
			Expect(string(r0.SecurityType[:])).To(Equal(strings.Repeat("\x00", 7)))
			Expect(string(r0.UnitOfMeasure[:])).To(Equal(strings.Repeat("\x00", 31)))
			Expect(string(r0.Underlying[:])).To(Equal(strings.Repeat("\x00", 21)))
			Expect(string(r0.StrikePriceCurrency[:])).To(Equal(strings.Repeat("\x00", 4)))
			Expect(r0.InstrumentClass).To(Equal(uint8('K')))
			Expect(r0.MatchAlgorithm).To(Equal(uint8('F')))
			Expect(r0.MdSecurityTradingStatus).To(Equal(uint8(78)))
			Expect(r0.MainFraction).To(Equal(uint8(255)))
			Expect(r0.PriceDisplayFormat).To(Equal(uint8(255)))
			Expect(r0.SettlPrice_type).To(Equal(uint8(255)))
			Expect(r0.SubFraction).To(Equal(uint8(255)))
			Expect(r0.UnderlyingProduct).To(Equal(uint8(255)))
			Expect(r0.SecurityUpdateAction).To(Equal(uint8('A')))
			Expect(r0.MaturityMonth).To(Equal(uint8(255)))
			Expect(r0.MaturityDay).To(Equal(uint8(255)))
			Expect(r0.MaturityWeek).To(Equal(uint8(255)))
			Expect(r0.UserDefinedInstrument).To(Equal(dbn.UserDefinedInstrument('N')))
			Expect(r0.ContractMultiplierUnit).To(Equal(int8(127)))
			Expect(r0.FlowScheduleType).To(Equal(int8(127)))
			Expect(r0.TickRule).To(Equal(uint8(255)))

			r1, r1h := records[1], records[1].Header
			Expect(r1h.TsEvent).To(Equal(uint64(1633417621703109854)))
			Expect(r1h.RType).To(Equal(dbn.RType(19)))
			Expect(r1h.PublisherID).To(Equal(uint16(2)))
			Expect(r1h.InstrumentID).To(Equal(uint32(6830)))
			Expect(r1.TsRecv).To(Equal(uint64(1633417621703120931)))
			Expect(r1.MinPriceIncrement).To(Equal(int64(9223372036854775807)))
			Expect(r1.DisplayFactor).To(Equal(int64(100000000000000)))
			Expect(r1.Expiration).To(Equal(uint64(18446744073709551615)))
			Expect(r1.Activation).To(Equal(uint64(18446744073709551615)))
			Expect(r1.HighLimitPrice).To(Equal(int64(9223372036854775807)))
			Expect(r1.LowLimitPrice).To(Equal(int64(9223372036854775807)))
			Expect(r1.MaxPriceVariation).To(Equal(int64(9223372036854775807)))
			Expect(r1.TradingReferencePrice).To(Equal(int64(9223372036854775807)))
			Expect(r1.UnitOfMeasureQty).To(Equal(int64(9223372036854775807)))
			Expect(r1.MinPriceIncrementAmount).To(Equal(int64(9223372036854775807)))
			Expect(r1.PriceRatio).To(Equal(int64(9223372036854775807)))
			Expect(r1.StrikePrice).To(Equal(int64(9223372036854775807)))
			Expect(r1.InstAttribValue).To(Equal(int32(2147483647)))
			Expect(r1.UnderlyingID).To(Equal(uint32(0)))
			Expect(r1.RawInstrumentID).To(Equal(uint32(2147483647)))
			Expect(r1.MarketDepthImplied).To(Equal(int32(2147483647)))
			Expect(r1.MarketDepth).To(Equal(int32(2147483647)))
			Expect(r1.MarketSegmentID).To(Equal(uint32(4294967295)))
			Expect(r1.MaxTradeVol).To(Equal(uint32(4294967295)))
			Expect(r1.MinLotSize).To(Equal(int32(2147483647)))
			Expect(r1.MinLotSizeBlock).To(Equal(int32(2147483647)))
			Expect(r1.MinLotSizeRoundLot).To(Equal(int32(100)))
			Expect(r1.MinTradeVol).To(Equal(uint32(4294967295)))
			Expect(r1.ContractMultiplier).To(Equal(int32(2147483647)))
			Expect(r1.DecayQuantity).To(Equal(int32(2147483647)))
			Expect(r1.OriginalContractSize).To(Equal(int32(2147483647)))
			Expect(r1.TradingReferenceDate).To(Equal(uint16(65535)))
			Expect(r1.ApplID).To(Equal(int16(32767)))
			Expect(r1.MaturityYear).To(Equal(uint16(65535)))
			Expect(r1.DecayStartDate).To(Equal(uint16(65535)))
			Expect(r1.ChannelID).To(Equal(uint16(0)))
			Expect(string(r1.Currency[:])).To(Equal(strings.Repeat("\x00", 4)))
			Expect(string(r1.SettlCurrency[:])).To(Equal(strings.Repeat("\x00", 4)))
			Expect(string(r1.Secsubtype[:])).To(Equal("Z " + strings.Repeat("\x00", 4)))
			Expect(string(r1.RawSymbol[:])).To(Equal("MSFT" + strings.Repeat("\x00", dbn.MetadataV2_SymbolCstrLen-len("MSFT"))))
			Expect(string(r1.Group[:])).To(Equal("pxnas-1" + strings.Repeat("\x00", 21-len("pxnas-1"))))
			Expect(string(r1.Exchange[:])).To(Equal("XNAS" + strings.Repeat("\x00", 5-len("XNAS"))))
			Expect(string(r1.Asset[:])).To(Equal(strings.Repeat("\x00", 7)))
			Expect(string(r1.Cfi[:])).To(Equal(strings.Repeat("\x00", 7)))
			Expect(string(r1.SecurityType[:])).To(Equal(strings.Repeat("\x00", 7)))
			Expect(string(r1.UnitOfMeasure[:])).To(Equal(strings.Repeat("\x00", 31)))
			Expect(string(r1.Underlying[:])).To(Equal(strings.Repeat("\x00", 21)))
			Expect(string(r1.StrikePriceCurrency[:])).To(Equal(strings.Repeat("\x00", 4)))
			Expect(r1.InstrumentClass).To(Equal(uint8('K')))
			Expect(r1.MatchAlgorithm).To(Equal(uint8('F')))
			Expect(r1.MdSecurityTradingStatus).To(Equal(uint8(78)))
			Expect(r1.MainFraction).To(Equal(uint8(255)))
			Expect(r1.PriceDisplayFormat).To(Equal(uint8(255)))
			Expect(r1.SettlPrice_type).To(Equal(uint8(255)))
			Expect(r1.SubFraction).To(Equal(uint8(255)))
			Expect(r1.UnderlyingProduct).To(Equal(uint8(255)))
			Expect(r1.SecurityUpdateAction).To(Equal(uint8('A')))
			Expect(r1.MaturityMonth).To(Equal(uint8(255)))
			Expect(r1.MaturityDay).To(Equal(uint8(255)))
			Expect(r1.MaturityWeek).To(Equal(uint8(255)))
			Expect(r1.UserDefinedInstrument).To(Equal(dbn.UserDefinedInstrument('N')))
			Expect(r1.ContractMultiplierUnit).To(Equal(int8(127)))
			Expect(r1.FlowScheduleType).To(Equal(int8(127)))
			Expect(r1.TickRule).To(Equal(uint8(255)))
		})
	})
})
